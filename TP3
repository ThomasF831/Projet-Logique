Inductive list_nat : Type :=
  | Nil  : list_nat
  | Cons : nat -> list_nat -> list_nat.

Hypothesis nat_eq_dec : forall (x y:nat), {x=y} + {~ x=y}.

Hypothesis le_lt_dec : forall (n m :nat), {n <= m} + {m < n}.

Definition if_inf_then_else (n:nat) (m:nat) (exp_then:list_nat) (exp_else:list_nat) :=
  match le_lt_dec n m with
  | left _ => exp_then
  | right _ => exp_else
  end.

Fixpoint insere (x:nat) (l:list_nat) :=
  match l with
  | Nil => Cons x Nil
  | Cons y l => if_inf_then_else x y (Cons x (Cons y l)) (Cons y (insere x l))
  end.

Fixpoint tri (l:list_nat) :=
  match l with
  | Nil => Nil
  | Cons x l => insere x (tri l)
  end.

Definition est_inferieur x y :=
  match le_lt_dec x y with
  | left _ => True
  | right _ => False
  end.

Inductive sorted: list_nat -> Prop :=
  | Sorted0: sorted Nil
  | Sorted1: forall x, sorted (Cons x Nil)
  | SortedS: forall l:list_nat, forall x:nat, forall y:nat,
             ((sorted (Cons y l)) /\ (est_inferieur x y))-> sorted (Cons x (Cons y l)).

Inductive eq_liste : list_nat -> list_nat -> Prop :=
  | Eq0 : eq_liste Nil Nil
  | EqS : forall x : nat, forall l1 l2 : list_nat, eq_liste l1 l2 -> eq_liste (Cons x l1) (Cons x l2).

Inductive mem : nat -> list_nat -> Prop :=
  | Mem1 : forall x : nat, forall l : list_nat, mem x (Cons x l)
  | MemS : forall x : nat, forall l : list_nat, forall y : nat, mem x l -> mem x (Cons y l).
