(** * Tutoriel 3 - Retour sur les types et prÃ©dicats inductifs *)

(** Cette feuille d'exercices regroupe diffÃ©rents exercices 
    courants sur les types et prÃ©dicats inductifs. *)



(** ** Exercice 1 - Addition et multiplication sur les entiers *)

(** Les nombres naturels sont prÃ©dÃ©finis dans Coq, comme le montre la 
    requÃªte suivante.
    Du sucre syntaxique est Ã©galement disponible pour Ã©crire, par exemple, 
    [2] au lieu de [S (S O)]. *)

Print nat.

Goal 2 = S (S O).
Proof.
  reflexivity.
Qed.

(** La dÃ©finition inductive de [nat] est en dehors des possibilitÃ©s de la
    logique du premier ordre : elle a un certain nombre de consÃ©quences 
    implicites montrÃ©es ci-dessous.

    Notez ici l'utilisation de la tactique [inversion] sur les Ã©galitÃ©s 
    entre les constructeurs du type inductif [nat]. *)

Goal forall x:nat, O <> S x.
Proof.
  intros x H.
  inversion H.
Qed.

Goal forall x y : nat, S x = S y -> x = y.
Proof.
  intros x y H.
  inversion H.
  reflexivity.
Qed.

(** Nous pouvons utiliser [destruct] pour effectuer une analyse de cas sur 
    un nombre naturel. *)

Goal forall x:nat, x = O \/ exists y:nat, x = S y.
Proof.
  intro x. destruct x.
  + left. reflexivity.
  + right. exists x. reflexivity.
Qed.

(** Un principe d'induction est Ã©galement dÃ©rivÃ© de la dÃ©finition inductive,
    qui est implicitement utilisÃ©e par la tactique [induction].
    Notez que le principe d'induction est une formule d'ordre supÃ©rieur,
    quantifiant sur [Prop]. *)

Check nat_ind.

Lemma Sx_x : forall x:nat, S x <> x.
Proof.
  intros x H.
  induction x.
  + inversion H.
  + inversion H. apply IHx. exact H1.
Qed.

(** [x+y] est une notation pour [plus x y]. Contrairement Ã  la logique du
    premier ordre, [plus] n'est pas un symbole de fonction abstraite dont
    l'interprÃ©tation est contrainte par des axiomes.

    Il est plutÃ´t dÃ©fini comme une fonction rÃ©cursive sur les nombres naturels.
    Dans Coq, toutes les fonctions sont totales : la terminaison est garantie 
    et il n'y a pas d'erreurs. *)

Print plus.

(** Dans la preuve suivante, nous utilisons [simpl] pour calculer [1+1].
    Notez que le script de preuve fonctionne sans cette
    Ã©tape de simplification explicite. *)

Goal 2 = 1+1.
Proof.
  simpl.
  reflexivity.
Qed.

Goal forall x y : nat, S x + y = S (x+y).
Proof.
  intros. reflexivity.
Qed.

(** Les preuves suivantes ne sont pas des calculs Ã©vidents pour Coq :
    l'induction sera nÃ©cessaire Ã  la place. Afin d'utiliser
    une hypothÃ¨se d'Ã©galitÃ©, vous aurez besoin de la tactique [rewrite]. *)

Goal forall x y z : nat, x = y -> x + z = y + z.
Proof.
  intros x y z Heq.
  rewrite Heq.
  reflexivity.
Qed.

(** Prouver les lemmes suivants sur l'addition des entiers naturels : *)
Lemma plus_0_n : forall n, 0 + n = n.
Proof.
intro.
simpl.
reflexivity.
Qed.

Lemma plus_n_0 : forall n, n + 0 = n.
Proof.
intro.
induction n.
simpl. reflexivity.
simpl.
rewrite IHn. reflexivity.
Qed.

(** Ecrire la multiplication pour les entiers *)

Fixpoint mult (n m : nat) := match n with
  | 0 => 0
  | S(p) => (mult p m) + m
end.

(** Prouver les lemmes suivants. *)

Lemma mult_0_n : forall n : nat, 0 * n = 0.
Proof.
intro. simpl.
reflexivity.
Qed.

Lemma mult_n_0 : forall n, n * 0 = 0.
Proof.
intro.
induction n.
simpl. reflexivity.
simpl. exact IHn.
Qed.

Lemma plus_assoc : forall n m p,
  n+(m+p) = n+m+p.
Proof.
intros n m p.
induction n.
simpl. reflexivity.
simpl. rewrite IHn.
reflexivity.
Qed.

Lemma plus_n_Sm : forall n m,
  n + S m = S (n + m).
Proof.
intros n m.
induction n.
simpl. reflexivity.
simpl. rewrite IHn.
reflexivity.
Qed.

Lemma plus_comm : forall n m, n + m = m + n.
Proof.
intros n m.
induction n.
simpl. symmetry. apply plus_n_0 with (n:=m).
simpl. rewrite IHn. symmetry.
apply plus_n_Sm with (n:=m) (m:=n).
Qed.

Lemma mult_n_Sm : forall n m, n*S m = n + n*m.
Proof.
intros n m.
induction n.
simpl. reflexivity.
simpl. rewrite IHn.
rewrite plus_assoc. rewrite plus_assoc.
rewrite plus_comm with (n:=m) (m:=n).
reflexivity.
Qed.

Lemma mult_comm : forall n m, n *m=m*n.
Proof.
intros n m.
induction n.
simpl.
rewrite mult_n_0.
reflexivity.
simpl.
rewrite mult_n_Sm.
rewrite IHn.
reflexivity.
Qed.


Lemma mult_plus_distr_r : forall n m p,
  (n+m)*p = n*p+m*p.
Proof.
intros n m p.
induction p.
rewrite mult_n_0. rewrite mult_n_0. rewrite mult_n_0.
rewrite plus_n_0.
reflexivity.
rewrite mult_n_Sm. rewrite mult_n_Sm. rewrite mult_n_Sm.
rewrite IHp.
rewrite plus_assoc. rewrite plus_assoc. rewrite plus_comm.
symmetry. rewrite plus_comm.
rewrite plus_assoc. rewrite plus_assoc.
symmetry. rewrite plus_assoc. rewrite plus_assoc.
rewrite <- plus_assoc with (n:=m*p + n) (m:=m) (p:= n*p).
symmetry. rewrite <- plus_assoc with (n:=m*p + n) (m:=n*p) (p:= m).
rewrite plus_comm with (n:=n*p) (m:=m).
rewrite plus_assoc. reflexivity.
Qed.

Lemma mult_assoc : forall n m p, n*(m*p) = (n*m)*p.
Proof.
intros n m p.
induction n.
rewrite mult_0_n. rewrite mult_0_n.
reflexivity.
simpl. rewrite IHn.
rewrite mult_plus_distr_r.
reflexivity.
Qed.

(** Prouver directement par induction sur n *)
Lemma mult_plus_distr_l : forall n m p,
  n*(m+p)=n*m+n*p.
Proof.
intros n m p.
induction n.
rewrite mult_0_n. rewrite mult_0_n. rewrite mult_0_n.
rewrite plus_0_n. reflexivity.
simpl. rewrite IHn.
rewrite plus_assoc. rewrite plus_assoc. rewrite plus_comm.
symmetry. rewrite plus_comm.
rewrite plus_assoc. rewrite plus_assoc.
symmetry.
rewrite plus_assoc. rewrite plus_assoc.
rewrite <- plus_assoc with (n:=n*p + m) (m:=p) (p:=n*m).
symmetry. rewrite <- plus_assoc with (n:=n*p + m) (m:=n*m) (p:=p).
rewrite plus_comm with (n:=p) (m:=n*m).
reflexivity.
Qed.
 
(** Prouver en utilisant les lemmes prÃ©cÃ©dents, mais bien sÃ»r pas    
   [mult_plus_distr_l]) *)
Lemma mult_plus_distr_l_bis : forall n m p,
  n*(m+p)=n*m+n*p.
Proof.
intros n m p.
rewrite mult_comm.
rewrite mult_plus_distr_r.
rewrite mult_comm. rewrite plus_comm.
rewrite mult_comm. rewrite plus_comm.
reflexivity. 
Qed.

(** ** Exercice 2 - L'appartenance Ã  une liste *)

(** AprÃ¨s avoir compris la signification de [mem],
    prouver les lemmes qui suivant. *)

Variable A : Type.

Inductive mem : A -> list A -> Prop :=
  mem_head : forall x l, mem x (cons x l)
| mem_tail : forall x y l, 
   mem x l -> mem x (cons y l).

Check app.
Print app.

Lemma Lemme : forall l1 x a,
mem x (cons a l1) -> x=a \/ mem x l1. 
Admitted.

Lemma app_left : forall l1 l2 x,
mem x l1 -> mem x (app l1 l2).
Proof.
intros L1 L2 x.
intro H.
induction L1.
induction L2.
simpl.
exact H.
apply mem_tail.
exact IHL2.
simpl.
(* apply Lemme with (l1:= (L1 ++ L2)) (x:=x) (a:=a). *)
Admitted.

Lemma app_or : forall l1 l2 x, 
mem x (app l1 l2) -> mem x l1 \/ mem x l2.
Proof.
intros l1 L2 x.
intro H.
induction l1.
+ right. exact H.
Admitted.

(** ** Exercice 3 - Retour un ancien exercice *)

(** Souvenez-vous d'un exercice de la premiÃ¨re feuille ! 
    Peut-Ãªtre que, dans un premier temps, vous aviez dÃ©fini
    la fonction double ainsi : *)
Definition double_math (m:nat) : nat := plus m m.

(** Mais pour des raisons calculatoires, il Ã©tait prÃ©fÃ©rable d'Ã©crire : *)
Fixpoint double (m:nat) : nat := 
  match m with
  | 0 => 0
  | S p => S (S (double p))
  end.

(** A prÃ©sent, vous avez toutes les clefs en main pour dÃ©montrer leur
    Ã©quivalence : *)

Lemma equiv_double_math_double :
forall n, double_math n = double n.
Proof.
intro n.
unfold double_math.
induction n.
rewrite plus_n_0.
simpl.
reflexivity.
simpl. rewrite plus_n_Sm.
rewrite IHn.
reflexivity.
Qed.

(** ** Exercice 4 - Une vision plus calculatoire *)

(** De mÃªme que pour [double], il est possible d'Ã©crire une version plus 
    calculatoire de [even] : *)
Definition is_even n := exists p, n = 2 * p.

(** Prouver les lemmes suivants : *)

Lemma zero_is_even : is_even 0.
Proof.
exists 0.
simpl.
reflexivity.
Qed.

Lemma is_even_plus : forall n p, 
   is_even n -> is_even p -> is_even (n + p).
Proof.
intros n p.
unfold is_even.
intros H1 H2.
elim H1. elim H2.
intros x H3 y H4.
exists (x+y).
rewrite H3. rewrite H4.
rewrite mult_plus_distr_l.
rewrite plus_comm.
reflexivity.
Qed.

(** ** Exercice 5 - Retour sur le prÃ©dicat de paritÃ© *)

(** On rappelle la dÃ©finition de [even] sous forme d'un prÃ©dicat inductif . *)

Inductive even : nat -> Prop :=
 | even_0 : even 0
 | even_SS : forall n, even n -> even (S (S n)).

(** Prouver les lemmes suivants : *)

Lemma even_4 : even 4.
Proof.
apply even_SS. apply even_SS.
apply even_0.
Qed.

Lemma even_succ_lemma : forall n, even n -> even (S (S (S (S n)))).
Proof.
intros n H.
apply even_SS. apply even_SS.
exact H.
Qed.

Theorem even_plus4 : forall n, even n -> even (4 + n).
Proof.
intros n H.
unfold plus.
apply even_succ_lemma.
exact H.
Qed.


Lemma Lemme1 : forall n, even n <-> is_even n.
intro n.
induction n.
+ split. 
  - intro H. unfold is_even.
  exists 0. simpl.
  reflexivity.
  - intro H. apply even_0.
+ split.
  - intro H.

Theorem ev_minus2 : forall n,
  even n -> even (pred (pred n)).
Proof.
intros n H.
unolfd even in H.

Admitted.

Theorem even5_nonsense :
  even 5 -> 2 + 2 = 9.
Proof.
Admitted.

Lemma ev_even : forall n,
  even n -> exists k, n = 2 * k.
Proof.
Admitted.
 
Lemma even_n_or_Sn : forall n, even n \/ even (S n).
Proof.
Admitted.

Lemma even_n_not_Sn : forall n, even n -> ~ even (S n).
Proof.
Admitted.

(** Induction de 2 en 2. *)
Lemma two_steps_induction : forall P : nat -> Prop, 
   P 0 -> 
   P 1 ->
  (forall n, P n -> P (S (S n))) ->
     forall n, P n.
Proof.
Admitted.

Lemma even_dec : forall n, even n \/ ~ even n.
Proof.
Admitted.


(** DÃ©finir [evenb : nat -> bool] qui teste si un entier est pair. *)


(** Prouver les lemmes suivants. Si vous avez besoin de rÃ©sultats sur les
    boolÃ©ens, vous pouvez les trouver dans [Bool]
    (utiliser [Require Import Bool.]). *)

Lemma evenb_correct : forall n, evenb n = true -> even n.
Proof.
Admitted.



Lemma evenb_complete : forall n, even n -> evenb n = true.
Proof.
Admitted.


Lemma evenb_spec : forall n, evenb n = true <-> even n.
Proof.
Admitted.


(** Prouver [even_dec_bis : forall n, even n \/ ~ even n]
    en utilisant [evenb_spec]. *)

Lemma even_dec_bis : forall n, even n \/ ~ even n.
Proof.
Admitted.


(** ** Exercice 6 - Ordre *)

(** [x <= y] est une notation pour [le x y],
    oÃ¹ [le] est dÃ©fini de maniÃ¨re inductive comme le montre la 
    requÃªte suivante. *)

Print le.

(** Les constructeurs [le_n] et [le_S] qui dÃ©finissent [le] peuvent Ãªtre
    Ãªtre utilisÃ©s comme hypothÃ¨ses / lemmes, par exemple dans la tactique
    [apply]. *)

Goal le 2 3.
Proof.
  apply le_S. apply le_n.
Qed.

(** Si [x <= y] est vrai, il doit avoir Ã©tÃ© obtenu par l'un des deux 
    constructeurs : la rÃ¨gle d'analyse de cas correspondante est donnÃ©e
    par la tactique [inversion]. *)

Goal forall x y : nat, x <= y -> x = y \/ x <= pred y.
Proof.
  intros x y H. inversion H.
  + left. reflexivity.
  + right.
    (* L'Ã©tape suivante est facultative,
       elle vous aide Ã  voir ce qui est identique pour Coq :
       [simpl] calcule ce qui peut Ãªtre calculÃ©. *)
    simpl. exact H0.
Qed.

Theorem le_O : forall x:nat, O <= x.
Proof.
Admitted.

Theorem le_S_S : forall x:nat, forall y:nat,
  S x <= S y -> x <= y.
Proof.
Admitted.

(** [x<y] est une notation pour [lt x y] qui est elle-mÃªme dÃ©finie
    en termes de [le]. *)

Print lt.

Theorem le_lt : forall x:nat, forall y:nat, x < S y -> x <= y.
Proof.
Admitted.

Theorem lt_S_case : forall x:nat, forall y:nat,
  x < S y -> x = y \/ x < y.
Proof.
Admitted.

(** ** Exercice 7 - Une induction forte *)

(** Avec les ingrÃ©dients ci-dessus, vous devriez Ãªtre capable de prouver
    un principe d'induction forte, exprimÃ© en utilisant une quantification
    sur des prÃ©dicats de nombres naturels. *)

Theorem strong_induction :
  forall (P:nat->Prop),
  (forall x:nat, (forall y:nat, y < x -> P y) -> P x) ->
  (forall x:nat, P x).
Proof.
Admitted.

(** ** Exercice 8 - Raisonnement sur les multiples *)

(** Un dernier exercice pour ce tutoriel ! *)

Inductive multiple : nat -> nat -> Prop :=
  | multiple_O : forall n:nat, multiple n O
  | multiple_step :
      forall n:nat, forall m:nat, multiple n m -> multiple n (n+m).

Goal forall x:nat,
  multiple 2 x -> multiple 3 x -> multiple 6 x.
Proof.
Admitted.

(** Merci Ã  David Baelde et Catherine Dubois. *)
